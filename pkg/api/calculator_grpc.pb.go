// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: calculator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GenerateTask_GiveTask_FullMethodName  = "/proto.GenerateTask/GiveTask"
	GenerateTask_GetResult_FullMethodName = "/proto.GenerateTask/GetResult"
)

// GenerateTaskClient is the client API for GenerateTask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenerateTaskClient interface {
	GiveTask(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TaskResponse, error)
	GetResult(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type generateTaskClient struct {
	cc grpc.ClientConnInterface
}

func NewGenerateTaskClient(cc grpc.ClientConnInterface) GenerateTaskClient {
	return &generateTaskClient{cc}
}

func (c *generateTaskClient) GiveTask(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, GenerateTask_GiveTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generateTaskClient) GetResult(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GenerateTask_GetResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenerateTaskServer is the server API for GenerateTask service.
// All implementations must embed UnimplementedGenerateTaskServer
// for forward compatibility.
type GenerateTaskServer interface {
	GiveTask(context.Context, *emptypb.Empty) (*TaskResponse, error)
	GetResult(context.Context, *ResultRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGenerateTaskServer()
}

// UnimplementedGenerateTaskServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGenerateTaskServer struct{}

func (UnimplementedGenerateTaskServer) GiveTask(context.Context, *emptypb.Empty) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveTask not implemented")
}
func (UnimplementedGenerateTaskServer) GetResult(context.Context, *ResultRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedGenerateTaskServer) mustEmbedUnimplementedGenerateTaskServer() {}
func (UnimplementedGenerateTaskServer) testEmbeddedByValue()                      {}

// UnsafeGenerateTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenerateTaskServer will
// result in compilation errors.
type UnsafeGenerateTaskServer interface {
	mustEmbedUnimplementedGenerateTaskServer()
}

func RegisterGenerateTaskServer(s grpc.ServiceRegistrar, srv GenerateTaskServer) {
	// If the following call pancis, it indicates UnimplementedGenerateTaskServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GenerateTask_ServiceDesc, srv)
}

func _GenerateTask_GiveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerateTaskServer).GiveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenerateTask_GiveTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerateTaskServer).GiveTask(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenerateTask_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerateTaskServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenerateTask_GetResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerateTaskServer).GetResult(ctx, req.(*ResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GenerateTask_ServiceDesc is the grpc.ServiceDesc for GenerateTask service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenerateTask_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GenerateTask",
	HandlerType: (*GenerateTaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GiveTask",
			Handler:    _GenerateTask_GiveTask_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _GenerateTask_GetResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator.proto",
}
